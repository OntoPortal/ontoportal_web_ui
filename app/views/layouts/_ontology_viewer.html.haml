- content_section = current_section
- concept_title = @concept.nil? ? "" : " - #{@concept.prefLabel} - Classes"
- @title = "#{@ontology.name}#{concept_title}"


= render :partial =>'layouts/header'
%div#bd
  :javascript
    // Javascript History HTML5 API
    if ( typeof JSON === 'undefined' ) {
      var
        url = '/javascripts/history/json2.js',
        scriptEl = document.createElement('script');
      scriptEl.type = 'text/javascript';
      scriptEl.src = url;
      document.body.appendChild(scriptEl);
    }

    // Ontology viewer vars
    jQuery(document).data().bp.ont_viewer = {};
    jQuery(document).data().bp.ont_viewer.ontology_id = jQuery(document).data().bp.ontology.acronym;
    jQuery(document).data().bp.ont_viewer.ontology_version_id = jQuery(document).data().bp.submission_latest.submissionId;
    jQuery(document).data().bp.ont_viewer.ontology_name = "#{@ontology.name}";
    jQuery(document).data().bp.ont_viewer.org_site = "#{$ORG_SITE}";
    jQuery(document).data().bp.ont_viewer.concept_id = "#{params[:conceptid] || (@concept ? @concept.id : 'root')}";
    jQuery(document).data().bp.ont_viewer.content_section = "#{sanitize(h(content_section))}";
    jQuery(document).data().bp.ont_viewer.concept_param = "#{"conceptid=\#{params[:conceptid]}" unless params[:conceptid].nil? || params[:conceptid].empty?}";
    jQuery(document).data().bp.ont_viewer.concept_name = "#{@concept.prefLabel unless @concept.nil?}";
    jQuery(document).data().bp.ont_viewer.metadata_only = "#{@ontology.summaryOnly}";
    jQuery(document).data().bp.ont_viewer.current_purl = "#{@current_purl}";
    jQuery(document).data().bp.ont_viewer.purl_prefix = "#{($PURL_ENABLED ? $PURL_PREFIX+"/"+@ontology.acronym : '')}";
    jQuery(document).data().bp.ont_viewer.concept_name_title = (jQuery(document).data().bp.ont_viewer.concept_name == "") ?
        "" : " - " + jQuery(document).data().bp.ont_viewer.concept_name;

    var nav_ont = function (link) {
      const page = jQuery(link).attr("data-bp-ont-page");
      const page_name = jQuery(link).attr("data-bp-ont-page-name");
      History.pushState({p: page}, page_name + " | " + jQuery(document).data().bp.ont_viewer.org_site, "?p=" + page);
    }

    jQuery(document).ready(() => {
      jQuery("#navbar-ontology a").on("click", function (e) {
        e.preventDefault();
        nav_ont(this)
      });
    })



  = render TurboModalComponent.new(id: 'application_modal')

  = render partial: 'concepts/perma_link_modal'

  = render partial: 'kgcl_dialogs'

  %div.row.pt-md-3.pb-md-2
    %div.col
      = render partial: 'layouts/ontology_viewer/header'

  %div.row.pb-4{ data: { controller: "history turbo-frame",  action: " lang_changed->history#updateURL lang_changed->turbo-frame#updateFrame"}}
    %div.col
      %div.card
        %div.card-header
          - sections = sections_to_show
          -# Tabbed navigation bar for ontology content sections
          %div{style: "display: flex; justify-content: space-between;"}
            %ul.nav.nav-tabs.card-header-tabs{id: "navbar-ontology", role: "tablist"}
              - sections.each do |section|
                %li.nav-item
                  = link_to(section_name(section) , ontology_path(@ontology.acronym, p: section),
                          id: "ont-#{section}-tab", class: "nav-link #{selected_section?(section) ? 'active show' : ''}",
                          data: {toggle: "tab", target: "#ont_#{section}_content", 'bp-ont-page': section ,
                          'bp-ont-page-name': ontology_viewer_page_name(@ontology.name, @concept&.prefLabel || '', section) })
            = select_tag :category, options_for_select(@submission_lang_options), data: { controller: "language-change", action: "change->language-change#onChange"}, id: "category-select", style: "background-color: #f2f2f2; color: #333; font-size: 14px; padding: 2px 6px 2px 6px; border: 1px solid #ccc; border-radius: 4px;outline: none;"
       
        %div.card-body
          %div.tab-content
            - sections.each do |section|
              %div.tab-pane{id: "ont_#{section}_content", class: selected_section?(section) ? 'active show' : ''}
                = lazy_load_section(section) { yield }


  = render partial: "layouts/footer"

</body>
</html>
